#summary OAuth Consumer How To

= OAuth Consumer =

This gives an overview how you can use the `oauth-php` library when you want to connect to a server.

= Add, List And Delete Servers =

== Add the OAuth server to which you want to connect ==

First fetch an instance of the OAuthStore you want to use, per default this will instantiate an `OAuthStoreMySQL` store.  Then add the server to the store, this will return the consumer_key from the , the `user_id` is the id of the currently logged on user.

You need to obtain the consumer key and consumer secret from the server. Every web site has a place where it is explained how you can obtain a key and secret for your application.

{{{
// Get the id of the current user (must be an int)
$user_id = 1;

// The server description
$server = array(
    'consumer_key' => 'some-server-supplied-key',
    'consumer_secret' => 'some-server-supplied-secret',
    'server_uri' => 'http://www.example.com/api/',
    'signature_methods' => array('HMAC-SHA1', 'PLAINTEXT'),
    'request_token_uri' => 'http://www.example.com/request_token',
    'authorize_uri' => 'http://www.example.com/authorize',
    'access_token_uri' => 'http://www.example.com/access_token'
);

// Save the server in the the OAuthStore
$store = OAuthStore::instance();
$consumer_key = $store->updateServer($server, $user_id);
}}}


== List all OAuth servers

You can easily obtain a list of all registered OAuth servers.  This will return an array with the full description of all servers registered for a certain user.

{{{
$store = OAuthStore::instance();
$servers = $store->listServers($optional_filter_text, $user_id);
}}}


== Delete an OAuth server from the registry ==

You can simply delete an OAuth server from the registry.  You need to supply the user id for which you want to delete the server.

{{{
$store = OAuthStore::instance();
$store->deleteServer($consumer_key, $user_id);
}}}


= Connect To A Server =

Before you can make OAuth signed calls to an OAuth enabled server, you have to obtain authorization from an user on that server.  This can be done with the `OAuthRequester` class.

First we need to obtain a request token from the OAuth server.  The OAuthRequester will request an instance of the OAuthStore for finding the needed uris.  When you don't use the default MySQL store you will need to request an instance of the store (supplying the correct initialisation parameters) before calling the method below.

I assume you have somewhere a function `uri_append()`.

{{{
$token = OAuthRequester::requestRequestToken($consumer_key, $user_id);

// Callback to my site, will be called when we finished the authorization
$callback_uri = 'http://www.mysite.com/callback?consumer_key='.rawurlencode($consumer_key);

// Now redirect to the autorization uri and get us authorized
if (!empty($token['authorize_uri']))
{
    // Redirect to the server, add a callback to our server
    // We will sign with the request token we obtained
    $uri = uri_append($token['authorize_uri'], 
                                    array('oauth_token' => $token['token'],'oauth_callback' => $callback_uri) );

...
}
else
{
    // No authorization uri, assume we are authorized, exchange request token for access token
   $uri = uri_append($callback_uri, array('oauth_token' => $token['token']));
}
}}}

