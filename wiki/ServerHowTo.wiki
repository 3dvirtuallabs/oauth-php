#summary Quick How To for OAuth enabling a server

= Introduction =

Adding OAuth authentication to your server is very easy.  You will need to check the incoming requests for any OAuth authentication details.  Some simple templates will be needed to handle the authorization of request tokens and for handling requests for access tokens. 

You will need a couple of controllers:

 # `oauth_register.php` to let an user obtain a consumer key and secret.
 # `request_token.php`  to return a request token.
 # `authorize.php` to let the user authorize a request token.
 # `access_token.php`  to exchange an authorized request token for an access token.

= OAuthStore =

In the examples below I assume that you use the default MySQL store for the OAuth credentials.  You can select another store by first requesting an OAuthStore instance with a parameter telling which store is needed:

{{{
$store = OAuthStore::instance('mystore');
}}}

This assumes that you have a file `OAuthStoremystore.php` in the store directory.  You can check the `OAuthStoreMySQL.php` for an example implementation.


= Checking A Request For Authorization =

At the start of every request handled by your application you can check if the request contains OAuth authorization information.

{{{
if (OAuthRequestVerifier::requestIsSigned())
{
	try
	{
		$req = new OAuthRequestVerifier();
		$user_id = $req->verify();

		// If we have an user_id, then login as that user (for this request)
		if ($user_id)
		{
			// **** Add your own code here ****
		}
	}
	catch (OAuthException $e)
	{
		// The request was signed, but failed verification
		header('HTTP/1.1 401 Unauthorized');
		header('WWW-Authenticate: OAuth realm=""');
		header('Content-Type: text/plain; charset=utf8');
					
		echo $e->getMessage();
		exit();
	}
}
}}}


= 1. `oauth_register.php` obtain consumer key and secret =

{{{
// The currently logged on user
$user_id = 1;

// This should come from a form filled in by the requesting user
$consumer = array(
    // These two are required
    'requester_name' => 'John Doe',
    'requester_email' => 'john@example.com',

    // These are all optional
    'callback_uri' => 'http://www.myconsumersite.com/oauth_callback',
    'application_uri' => 'http://www.myconsumersite.com/',
    'application_title' => 'John Doe\'s consumer site',
    'application_descr' => 'Make nice graphs of all your data',
    'application_notes' => 'Bladibla',
    'application_type' => 'website',
    'application_commercial' => 0
);

// Register the consumer
$store = OAuthStore::instance(); 
$key   = $store->updateConsumer($consumer, $user_id);

// Get the complete consumer from the store
$consumer = $store->getConsumer($key);

// Some interesting fields, the user will need the key and secret
$consumer_id = $consumer['osr_id'];
$consumer_key = $consumer['osr_consumer_key'];
$consumer_secret = $consumer['osr_consumer_secret'];
}}}

When you want to update a previously registered consumer, then supply the `id` of the consumer, the `consumer_key` and the `consumer_secret`.  The key and secret can not be changed and are used as extra verification during the update.

== Requesting a list of registered consumers ==

You can fetch a list of all consumers currently registered by a certain user:

{{{
// The currenly logged on user
$user_id = 1;

// Fetch all consumers registered by the current user
$store = OAuthStore::instance();
$list = $store->listConsumers($user_id);
}}}

= 2. `request_token.php` return a request token =

{{{
$server = new OAuthServer();
$server->requestToken();
}}}

= 3. `authorize.php` user authorization of a request token =

= 4. `access_token.php` exchange authorized request token for an access token =

{{{
$server = new OAuthServer();
$server->accessToken();
}}}
